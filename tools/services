#!/usr/bin/env bash

# This file is part of the Archivematica development tools.
#
# Copyright 2010-2017 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

function detect_deployment()
{
    # detect if upstart/systemd/sysvinit
    if [[ `/sbin/init --version 2> /dev/null` =~ upstart ]]; then
	INITSYS="upstart";
    elif [[ `systemctl` =~ -\.mount ]]; then
	INITSYS="systemd";
    elif [[ `-f /etc/init.d/cron && ~ -h /etc/init.d/cron` ]]; then
	INITSYS="sysvinit" # unlikely
    fi

  # detect if 1.5 style deployment
    if [[ `grep "VERSION = (1, 5" /usr/lib/archivematica/archivematicaCommon/version.py` ]]; then
	INITSYS="1.5";
    fi
}

function storage_service()
{
    case $INITSYS in
	upstart) sudo $ACTION archivematica-storage-service;;
	systemd) sudo systemctl $ACTION archivematica-storage-service;;
	1.5)     sudo service uwsgi $ACTION;;
	*) 
    esac
}

function dashboard()
{
    case $INITSYS in
	upstart) sudo $ACTION archivematica-dashboard;;
	systemd) sudo systemctl $ACTION archivematica-storage-service;;
	1.5)     sudo service apache2 $ACTION;;
    esac
}    
 
function mcp_server()
{
    case $INITSYS in
	upstart|1.5) sudo $ACTION archivematica-mcp-server;;
	systemd) sudo systemctl $ACTION archivematica-mcp-server;;
    esac
}

function mcp_client()
{
    case $INITSYS in
	upstart|1.5) sudo $ACTION archivematica-mcp-client;;
	systemd)     sudo systemctl $ACTION archivematica-mcp-client;;
    esac
}

function full()
{
    #handle all services, not just am specific ones
    case $INITSYS in
	upstart|1.5)
	    sudo service gearman-job-server "$ACTION"
	    sudo "$ACTION" fits
	    sudo service clamav-daemon "$ACTION"
	    sudo service elasticsearch "$ACTION"
	    sudo service nginx "$ACTION"
	    ;;
	systemd)
	    sudo systemctl $ACTION gearmand
	    sudo systemctl $ACTION fits-nailgun
	    sudo systemctl $ACTION clamd
	    sudo systemctl $ACTION nginx
	    ;;
    esac

    #only needed if old style
    #sudo service apache2 $ACTION >/dev/null 2>$1 
    #sudo service uwsgi $ACTION >/dev/null 2>$1 
    storage_service
    mcp_server
    mcp_client
    dashboard
}

detect_deployment

#defaults
ACTION="restart"
LEVEL="basic"
#look for user supplied parameters
{
    [ $# -gt 0 ] && ACTION=$1
}
{
    [ $# -gt 1 ] && LEVEL=$2
}



case $ACTION in
    'help')
	echo "am services: manage archivematica services"
	echo "Usage: am services <action> <level>"
	echo "    action can be one of 'restart (default), start, stop, status, help'"
	echo "    level can be one of 'basic (default), full, storage_service, pipeline'"
	exit 1
	;;
    restart|start|stop|status)
	echo "attempting $LEVEL $ACTION"
	;;
    *)
	echo "Unknown action $ACTION, available actions are 'restart (default), start, stop, status, help'"
	exit 1
	;;
esac

case $LEVEL in
    'basic')
	storage_service
	mcp_server
	mcp_client
	dashboard
	;;
    'full')
	full
	;;
    'storage_service')
	storage_service
	;;
    'pipeline')
	mcp_server
	mcp_client
	dashboard
	;;
    *)
	echo "Unknown level $LEVEL, available levels are 'basic, full, storage_service, pipeline'"
	exit 1
esac

echo "$LEVEL $ACTION complete"

