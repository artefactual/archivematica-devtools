#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This file is part of the Archivematica development tools.
#
# Copyright 2017 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.    See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.    If not, see <http://www.gnu.org/licenses/>.

import argparse
import bagit
import os
import django
import subprocess
import sys
from pwd import getpwnam

sys.path.append('/usr/lib/archivematica/storage-service')

def move_rsync(source, destination):
    command = ['rsync', '-t', '-O', '--protect-args', '--chmod=ugo+rw', '-r', source, destination]
    p = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
    stdout, _ = p.communicate()
    if p.returncode != 0:
        print('3')
        sys.exit(3)

def main():
    parser = argparse.ArgumentParser(description='Import an AIP that was created in a different Archivematica pipeline')
    parser.add_argument('--django-secret-key', help='DJANGO SECRET KEY for your storage service', default='CHANGE_ME_WITH_A_SECRET_KEY')
    parser.add_argument('--aip-size', help='Size of AIP on disk', default=0)
    parser.add_argument('--aip-store', help='Path to AIP Storage Location', default='/var/archivematica/sharedDirectory/www/AIPsStore/')
    parser.add_argument('--pipeline-uuid', help='UUID of original pipeline', default='4ffa7ef2-e2f9-4b74-94a6-91c0315357ea')
    parser.add_argument('rootdir', help='Path to the directory containing the AIPs', metavar='PATH')

    args = parser.parse_args()

    os.environ["DJANGO_SETTINGS_MODULE"] = "storage_service.settings.production"
    os.environ["EMAIL_HOST_PASSWORD"] = ""
    os.environ["SS_DB_NAME"] = "/var/archivematica/storage-service/storage.db"
    os.environ["DJANGO_STATIC_ROOT"] = "/usr/lib/archivematica/storage-service/assets"
    os.environ["SS_DB_PASSWORD"] = ""
    os.environ["SS_DB_USER"] = ""
    os.environ["SS_DB_HOST"] = ""
    os.environ["EMAIL_PORT"] = "25"
    os.environ["DJANGO_SECRET_KEY"] = args.django_secret_key
    os.environ["EMAIL_HOST_USER"] = ""
    os.environ["EMAIL_HOST"] = "localhost"

    # Check root directory exists
    if not os.path.isdir(args.rootdir):
        #print("Can't access the location you specified, it doesn't exist.")
        print('4')
        sys.exit(4)

    bag = bagit.Bag(args.rootdir)

    if not bag.is_valid():
        #print("aip is not valid")
        print('1')
        sys.exit(1)

    django.setup()
    from django_extensions.db.fields import UUIDField
    from common import utils
    from locations import models
    import glob

#    print('django setup start to save record')
    #create a new Package for this AIPI
    a = models.Package()
    
    #find uuid of AIP, from the name of the METS xml file
    mets = glob.glob(args.rootdir + 'data/METS*xml')
    if not mets:
        print('5')
        sys.exit(5)

    a.uuid = os.path.basename(mets[0])[5:41]
    first_uuid_dir = a.uuid[0:4]
    #create a new home for this AIP in the AIP Storage Location
    uuid_path = utils.uuid_to_path(a.uuid)
    new_home = args.aip_store + uuid_path
    os.makedirs(new_home)
    a.current_path=uuid_path + "/" + os.path.basename(os.path.normpath(args.rootdir))
    #copy the AIP to the new home
    move_rsync(args.rootdir, args.aip_store + a.current_path)

    am_uid = getpwnam('archivematica').pw_uid
    am_gid = getpwnam('archivematica').pw_gid
    for root, dirs, files in os.walk(args.aip_store + first_uuid_dir):
        os.chown(root, am_uid, am_gid)
        for dir in dirs:
            os.chown(os.path.join(root, dir), am_uid, am_gid)
        for file in files:
            os.chown(os.path.join(root, file), am_uid, am_uid)
   
    oldpipe = models.Pipeline.objects.get(uuid=args.pipeline_uuid)
    a.origin_pipeline=oldpipe
    
    #TODO find proper aip storage location, this assumes there is only one defined
    b = models.Package.objects.all()[0]
    a.current_location=b.current_location
    
    a.package_type = 'AIP'
    a.status = 'UPLOADED'

    a.size = args.aip_size
    a.save()
    #return the uuid of the AIP
    print(a.uuid)
    sys.exit(0)

if __name__ == '__main__':
    main()
