#!/usr/bin/env python2
# -*- coding: utf-8 -*-

# This file is part of the Archivematica development tools.
#
# Copyright 2010-2016 Artefactual Systems Inc. <http://artefactual.com>
#
# Archivematica is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Archivematica is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Archivematica.  If not, see <http://www.gnu.org/licenses/>.

from __future__ import print_function
from argparse import ArgumentParser
import datetime
import os
import sys

import jinja2

sys.path.append('/usr/share/archivematica/dashboard')
os.environ["DJANGO_SETTINGS_MODULE"] = "settings.local"

import django
from django.db import connection

django.setup()
from fpr.models import IDCommand, IDRule, IDTool, Format, FormatGroup, FormatVersion, FPCommand, FPRule, FPTool

FORMAT_FIELDS = (
    "description",
    "pronom_id",
    "version",
)

IDCOMMAND_FIELDS = (
    "description",
    "config",
    "replaces_id",
    "script",
    "script_type",
    "tool_id",
)

IDRULE_FIELDS = (
    "command_output",
    "command_id",
    "format_id",
)

IDTOOL_FIELDS = (
    "description",
    "version",
)

FPCOMMAND_FIELDS = (
    "description",
    "tool_id",
    "command_usage",
    "command",
    "script_type",
    "output_location",
    "output_format_id",
    "verification_command_id",
    "event_detail_command_id",
    "replaces_id",
)


FPRULE_FIELDS = (
    "purpose",
    "command_id",
    "format_id",
)

FPTOOL_FIELDS = (
    "description",
    "version",
)


NAME_MAP = {
    "idcommand": (IDCommand, IDCOMMAND_FIELDS),
    "idrule": (IDRule, IDRULE_FIELDS),
    "idtool": (IDTool, IDTOOL_FIELDS),
    "fpcommand": (FPCommand, FPCOMMAND_FIELDS),
    "fprule": (FPRule, FPRULE_FIELDS),
    "fptool": (FPTool, FPTOOL_FIELDS),
}

MIGRATION_TEMPLATE = """
# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import main.models

def forwards_fn(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    {% for change in changes %}
    {{ change.model }} = apps.get_model("fpr", "{{ change.model }}")
    {% if change.type == 'create' %}
    {{ change.model }}.objects.using(db_alias).create(**{{ change.changes }})
    {% else %}
    {{ change.model }}.objects.filter({{ change.identity_key }}={{ repr(change.identity_value) }}).update(**{{ change.changes }})
    {% endif %}
    {% endfor %}

def reverse_fn(apps, schema_editor):
    db_alias = schema_editor.connection.alias
    {% for change in changes %}
    {{ change.model }} = apps.get_model("fpr", "{{ change.model }}")
    {% if change.type == 'create' %}
    {{ change.model }}.objects.filter(**{{ change.changes }}).delete()
    {% else %}
    {{ change.model }}.objects.filter({{ change.identity_key }}={{ repr(change.identity_value) }}).update(**{{ change.reverse }})
    {% endif %}
    {% endfor %}

class Migration(migrations.Migration):
    dependencies = []
    operations = [
        migrations.RunPython(forwards_fn, reverse_fn),
    ]
"""


def _filter_dict(d):
    def test(pair):
        k, _ = pair
        return not k.startswith('_')
    return dict(filter(test, d.items()))


def _convert_datetime_fields(d):
    """
    Given a dict, returns a copy where any datetime objects are replaced by
    isoformat versions of themselves.

    This is needed to make sure that the dictionary can be properly represented
    by repr().
    """
    new_dict = d.copy()
    for k, v in new_dict.items():
        if isinstance(v, datetime.datetime):
            new_dict[k] = v.isoformat()

    return new_dict


def ask_for_field(field):
    print(field + ":", file=sys.stderr)
    s = sys.stdin.readline()
    if s.endswith("\n"):
        s = s[0:-1]
    return s


def create_format():
    changes = []
    obj = FormatVersion()

    format_description = ask_for_field("format")
    try:
        format = Format.objects.get(description=format_description)
    except Format.DoesNotExist:
        format = Format(description=format_description)
        format.save()
        changes.append({
            'model': 'Format',
            'type': 'create',
            'changes': _convert_datetime_fields(_filter_dict(format.__dict__))
        })

    if not format.group:
        group_description = ask_for_field("format_group")
        try:
            group = FormatGroup.objects.get(description=group_description)
        except FormatGroup.DoesNotExist:
            group = FormatGroup(description=group_description)
            group.save()
            changes.append({
                'model': 'FormatGroup',
                'type': 'create',
                'changes': _convert_datetime_fields(_filter_dict(group.__dict__))
            })
        format.group = group

    for field in FORMAT_FIELDS:
        val = ask_for_field(field)
        if val:
            setattr(obj, field, val)

    obj.save()
    changes.append({
        'model': 'FormatVersion',
        'type': 'create',
        'changes': _convert_datetime_fields(_filter_dict(obj.__dict__))
    })

    return changes


def create_rule(kind, command_file=None):
    changes = []

    klass, fields = NAME_MAP[kind]
    obj = klass()
    for field in fields:
        if command_file and field in ("command", "script"):
            with open(command_file) as command:
                val = command.read()
        else:
            val = ask_for_field(field)

        # Empty values should be NULL, not empty strings
        if val:
            setattr(obj, field, val)

    if hasattr(obj, "replaces") and obj.replaces:
        obj.replaces.enabled = False
        obj.replaces.save()
        changes.append({
            'model': type(obj.replaces).__name__,
            'type': 'update',
            'identity_key': 'uuid',
            'identity_value': obj.replaces.uuid,
            'changes': {
                'enabled': False,
            },
            'reverse': {
                'enabled': True,
            }
        })

    obj.save()
    changes.append({
        'model': type(obj).__name__,
        'type': 'create',
        'changes': _convert_datetime_fields(_filter_dict(obj.__dict__))
    })

    return changes


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument("kind", help="Type of FPR rule to create")
    parser.add_argument("command", nargs="?", default=None,
                        help="Path to command source code (optional)")
    opts = parser.parse_args()

    try:
        if os.path.basename(sys.argv[0]) == "add-format":
            changes = create_format()
        else:
            changes = create_rule(opts.kind, command_file=opts.command)
        template = jinja2.Template(MIGRATION_TEMPLATE, trim_blocks=True, lstrip_blocks=True)
        print(template.render(changes=changes, repr=repr))
    except KeyboardInterrupt:
        sys.exit("\nAborting")
